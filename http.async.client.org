#+TITLE: Asynchronous HTTP Client for Clojure and Twitter Streaming API
#+AUTHOR: Hubert Iwaniuk
#+EMAIL: neotyk@kungfoo.pl
* [[http://github.com/neotyk/http.async.client][*http.async.client*]] & [[http://dev.twitter.com/pages/streaming_api][Twitter Streaming API]]
  [[http://github.com/neotyk/http.async.client][*http.async.client*]] is a [[http://clojure.org/][Clojure]] library based on [[http://github.com/AsyncHttpClient/async-http-client][Asynchronous Http Client for Java]]
  which runs on top of [[http://jboss.org/netty][Netty Project]].

  So much for introduction, lets see some sample code that uses Twitter [[http://dev.twitter.com/pages/streaming_api_methods][streaming api]].

  Importing:
#+BEGIN_SRC clojure
(ns twitter-sample
  (:require [http.async.client :as c]
            [org.danlarkin.json :as j]))
#+END_SRC

  Settings and helper to print twits as they fly by:
#+BEGIN_SRC clojure
(def u "username")
(def p "password")

(defn print-user-and-text [s]
  (let [twit (j/decode-from-str s)
        user (:screen_name (:user twit))
        text (:text twit)]
    (println user "=>" text)))
#+END_SRC

  Lets read *statuses/sample*:
#+BEGIN_SRC clojure
(doseq [twit-str (c/string
                  (c/stream-seq :get "http://stream.twitter.com/1/statuses/sample.json"
                                :auth {:user u :password p}))]
  (print-user-and-text twit-str))
#+END_SRC

  Or *statuses/filter*:
#+BEGIN_SRC clojure
(doseq [twit-str (c/string
                   (c/stream-seq :post "http://stream.twitter.com/1/statuses/filter.json"
                                 :body {"track" "basketball,football,baseball,footy,soccer"}
                                 :auth {:user u :password p}))]
  (print-user-and-text twit-str))
#+END_SRC

  Those two samples show also how to consume HTTP Streams as [[http://richhickey.github.com/clojure/clojure.core-api.html#clojure.core/seq][clojure.core/seq]],
  a new feature that was introduced in [[http://github.com/neotyk/http.async.client/tree/v0.2.0][v0.2.0]].

  You can also handle sequences via [[http://neotyk.github.com/http.async.client/docs.html#sec-1.2.4.2][callbacks]].

  Requesting HTTP resources that are not streams is even simpler:
#+BEGIN_SRC clojure
(let [response (c/GET "http://github.com/neotyk/http.async.client/")]
  (c/await response)
  (c/string response))
#+END_SRC

  There is extensive documentation available on the [[http://neotyk.github.com/http.async.client][github pages]] of the
  [[http://github.com/neotyk/http.async.client][project]], you can also find [[http://github.com/neotyk/http.async.client/blob/master/changelog.org][Changelog]] and [[http://neotyk.github.com/ahc-clj/autodoc/][API]].

  Big thanks go to [[http://groups.google.com/group/amsterdam-clojurians][Amsterdam Clojurians]], this library
  received so much love and help from this group.
  Kudos to [[http://twitter.com/jfarcand][Jeanfrancois Arcand]] for starting
  [[http://github.com/AsyncHttpClient/async-http-client][async-http-client]] recently reaching the [[http://jfarcand.wordpress.com/2010/09/04/async-http-client-1-1-0-released/][1.1.0 release]].

  I would love to hear from you what you think of this library.
